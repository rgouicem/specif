include "constantes.lus"
include "memory.lus"
include "procs.lus"
include "bcu.lus"
include "bus.lus"
include "caches.lus"

node main (op, valid, data, ad: bool ^ NPROCS) returns ();
var proc_op, proc_valid, proc_data, proc_ad, gel: bool ^ NPROCS;
    arb_gnt: int;
    mem_b_in: b_wires;
    CPU1_b_in: b_wires;
    CPU2_b_in: b_wires;
    CPU3_b_in: b_wires;
    b_out: b_wires;
    req: bool ^ (NPROCS+1);
    cache_data: bool ^ NPROCS;
let
  (proc_op[0], proc_valid[0], proc_data[0], proc_ad[0]) = proc1(op[0], valid[0], gel[0], cache_data[0], data[0], ad[0]);
  (proc_op[1], proc_valid[1], proc_data[1], proc_ad[1]) = proc2(op[1], valid[1], gel[1], cache_data[1], data[1], ad[1]);
  (proc_op[2], proc_valid[2], proc_data[2], proc_ad[2]) = proc3(op[2], valid[2], gel[2], cache_data[2], data[2], ad[2]);
 
  (mem_b_in, req[0]) = memory(arb_gnt, b_out);
  arb_gnt = bcu(req);
  
  b_out = bus([mem_b_in[0], mem_b_in[1], mem_b_in[2], mem_b_in[3],
              CPU1_b_in[0], CPU1_b_in[1], CPU1_b_in[2], CPU1_b_in[3], 
              CPU2_b_in[0], CPU2_b_in[1], CPU2_b_in[2], CPU2_b_in[3],
              CPU3_b_in[0], CPU3_b_in[1], CPU3_b_in[2], CPU3_b_in[3]], arb_gnt);
  (gel[0], req[1], cache_data[0], CPU1_b_in) = cache1(proc_op[0], proc_valid[0], arb_gnt, proc_data[0], proc_ad[0], b_out);
  (gel[1], req[2], cache_data[1], CPU2_b_in) = cache2(proc_op[1], proc_valid[1], arb_gnt, proc_data[1], proc_ad[1], b_out);
  (gel[2], req[3], cache_data[2], CPU3_b_in) = cache3(proc_op[2], proc_valid[2], arb_gnt, proc_data[2], proc_ad[2], b_out);
tel;