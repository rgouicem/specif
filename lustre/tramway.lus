node controleur (porte_ouverte, en_station, attention_depart, demande_porte: bool) 
        returns (ouvrir_porte,  fermer_porte,  porte_ok: bool);
var porte_demandee: bool;
let
  porte_demandee = false->(not porte_ouverte and (demande_porte or pre porte_demandee) and not attention_depart);
  ouvrir_porte = porte_demandee and not attention_depart and en_station and not porte_ouverte;
  fermer_porte = attention_depart and porte_ouverte;
  porte_ok = not porte_ouverte and en_station and not porte_demandee;
--  porte_d = porte_demandee;
tel

node porte (ouvrir_porte, fermer_porte: bool; delai: int) returns (porte_ouverte: bool);
var timer, state: int;
    -- state = {0: closed, 1: opening, 2: opened, 3: closing}
let
  assert not (ouvrir_porte and fermer_porte);
  state = 0->(if pre state = 0 then (if ouvrir_porte then 1 else 0)
              else (if pre state = 1 then (if timer = 0 then 2 else 1)
                    else (if pre state = 2 then (if fermer_porte then 3 else 2)
                          else (if timer = 0 then 0 else 3))));
  porte_ouverte = false->((pre state = 2) or (pre state = 3));
  timer = 0->(if (pre state = 0 and ouvrir_porte) or (pre state = 2 and fermer_porte) then delai-1 else pre timer -1);
tel

node main (delai: int; en_station, attention_depart, demande_porte: bool)
  returns (porte_ouverte, ouvrir_porte, fermer_porte, porte_ok: bool);
let
  porte_ouverte = porte(ouvrir_porte, fermer_porte, delai);
  (ouvrir_porte, fermer_porte, porte_ok) = controleur(porte_ouverte, en_station, attention_depart, demande_porte);
tel